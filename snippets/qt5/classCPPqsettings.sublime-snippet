<snippet>
  <description>Qt5 C++ QSettings Class</description>
  <content><![CDATA[
#include "${2:${TM_FILENAME/(.+)\..+|:(.*)/\L\1\E/i}}.h"

#include <QCoreApplication>
#include <QSettings>
#include <QDir>
#include <QFile>
#include <QString>

${4:#include "${3:mod-name-short}consts.h"}


${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}}::${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}}(QString _filename, QObject* _parent)
: QObject(_parent) {
  settings = NULL;
  m_userHomeDir = QDir::home().absolutePath();

  // Get config file from [application root directory]/config
  m_appRootDir = QCoreApplication::applicationDirPath();
  QDir appRoot(m_appRootDir);

  appRoot.cdUp();
  m_configDir = appRoot.absolutePath() + "/config";

  if (_filename == "") {
    m_settingsFile = m_configDir + "/${3:mod-name-short}-settings.ini";
  }
  else {
    m_settingsFile = _filename;
    m_configDir = QFileInfo(m_settingsFile).absolutePath();
  }

  if (!QFile::exists(m_settingsFile)) {
    qWarning() << "Warning: Settings file" << m_settingsFile << "does not exist.";
    m_configDir = m_userHomeDir + "/.${3:mod-name-short}";
    m_settingsFile = m_configDir + "/${3:mod-name-short}-settings.ini";
    qWarning() << "   Trying" << m_settingsFile << "...";
    if (!QFile::exists(m_settingsFile)) {
      qWarning() << "   File not found\n";
      qWarning() << "ERROR: No valid config files found.";
      qWarning() << "NOTE: you can specify a config file with the '-c <settings.ini>' option.";
      qWarning() << "Exiting.";
      exit(1);
    }
  }

  loadSettingsFile(m_settingsFile);
  qDebug() << "Loaded settings file:" << m_settingsFile;
}

${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}}::~${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}}() {
}

void ${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}}::loadSettingsFile(QString _filename) {
  if (settings) {
    qDebug() << "Settings object already exists, recreating it...";
    delete settings;
  }
  settings = new QSettings(_filename, QSettings::IniFormat);
  qDebug() << "Child Keys/Groups:" << settings->childKeys() << "/" << settings->childGroups();

  // Load general settings
  ${5:m_uuid        = settings->value("uuid").toInt();}
}

]]></content>
  <tabTrigger>classCPPqsettings</tabTrigger>
  <scope>source.c, source.c++, source.objc, source.objc++</scope>
</snippet>